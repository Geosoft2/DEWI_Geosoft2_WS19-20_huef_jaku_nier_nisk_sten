#!/usr/bin/env node

// jshint esversion: 8
// jshint node: true
"use strict";


/**
 * Module dependencies.
 */
const app = require('../app');
const http = require('http');
const debug = require('debug')('app:server');
const chalk = require('chalk');
const util = require('util');
const setIntervalPromise = util.promisify(setInterval);

const {requestExtremeWeather} = require('../helpers/saveExtremeWeather');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort('3000');
app.set('port', port);

/**
 * First request extreme Weather and finally start APP
 */
requestExtremeWeather(function(){

  // request extreme weather every XY seconds
  setIntervalPromise(function(){
    console.log(chalk.yellow.inverse('Wiederholung'));
    requestExtremeWeather();
  }, 1000*60*Number(process.env.INTERVALL));

   /*
    * Create HTTP APP-server.
    */
   var server = http.createServer(app);

   /**
    * Listen on provided port, on all network interfaces.
    */
   server.listen(port, () => console.log(chalk.green.inverse("App listening on port " + port + "!")));
   server.on('error', onError);
   server.on('listening', onListening);

   /**
    * Event listener for HTTP server "error" event.
    */
   function onError(error) {
     if (error.syscall !== 'listen') {
       throw error;
     }

     var bind = typeof port === 'string'
       ? 'Pipe ' + port
       : 'Port ' + port;

     // handle specific listen errors with friendly messages
     switch (error.code) {
       case 'EACCES':
         console.error(bind + ' requires elevated privileges');
         process.exit(1);
         break;
       case 'EADDRINUSE':
         console.error(bind + ' is already in use');
         process.exit(1);
         break;
       default:
         throw error;
     }
   }

   /**
    * Event listener for HTTP server "listening" event.
    */
   function onListening() {
     var addr = server.address();
     var bind = typeof addr === 'string'
       ? 'pipe ' + addr
       : 'port ' + addr.port;
     debug('Listening on ' + bind);
   }

 });

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
